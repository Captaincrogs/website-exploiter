from ipaddress import ip_address
import json
import logging
import re
import sys

from rich.layout import Layout
from rich.live import Live
from rich.console import Console
from rich.logging import RichHandler
from rich.text import Text
from rich.traceback import install
from rich.progress import TimeElapsedColumn, Progress, TextColumn
from typing import List
import nmap


# ports a web server may have open
http = 80
https = 443
ftp = 21
ftps = 21
ssh = 22
smtp = 25
smtps = 465
imaps = 993
imap = 143

# empty open ports list
open_ports = []

# user input
ip_addresss = input("Enter IP address: ")
start_port = int(input("Enter start port: "))
end_port = int(input("Enter end port: "))


def scanPorts():
    global ip_addresss, start_port, end_port
    # check if ip address is valid
    try:
        ip_address(ip_addresss)
    except ValueError:
        print("Invalid IP address")
        sys.exit()
    # check if start port is valid
    try:
        start_port = int(start_port)
    except ValueError:
        print("Invalid start port")
        sys.exit()

    # scan ports and print only the open ports
    nm = nmap.PortScanner()
    nm.scan(ip_addresss, str(start_port) + "-" + str(end_port))
    for host in nm.all_hosts():
        print("----------------------------------------------------")
        print("Host : %s (%s)" % (host, nm[host].hostname()))
        print("State : %s" % nm[host].state())
        for proto in nm[host].all_protocols():
            print("---------------------------------------------------")
            print("Protocol : %s" % proto)
            l = nm[host][proto].keys()
            for port in l:
                print("port : %s\tstate : %s" %
                      (port, nm[host][proto][port]['state']))
                if nm[host][proto][port]['state'] == "open":
                    open_ports.append(port)
                # print(open_ports)


def targetPort(open_ports):
    print(open_ports)
