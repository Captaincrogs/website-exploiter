from ipaddress import ip_address
import json
import logging
import re
from select import select
import sys
from colorama import Fore, Back, Style

from typing import List
import nmap

# converts the image to print in terminal
# with 8 color encoding and palette tango

ports_available = {
    80: "http",
    443: "https",
    22: "ssh",
    21: "ftp",
    23: "telnet",
    25: "smtp",
    53: "dns",
    3306: "mysql",
    1433: "mssql",
}

open_ports = []
toTarget = ""
ip_addresss = input("Enter IP address: ")
start_port = int(input("Enter start port range <: "))
end_port = int(input("Enter end port range >: "))


class service():
    def __init__(self, name, port, connect):
        self.name = name
        self.port = port
        self.connect = connect

    def ssh_connect():
        global toTarget
        ssh_client = paramiko.SSHClient()
        ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh_client.connect(ip_addresss, username="root", password="toor")
        print("SSH connection established")
        ssh_client.close()

    def ftp_connect():
        global toTarget
        ftp_client = ftplib.FTP(ip_addresss)
        ftp_client.login("root", "toor")
        print("FTP connection established")
        ftp_client.close()

    def telnet_connect():
        global toTarget
        telnet_client = telnetlib.Telnet(ip_addresss)
        telnet_client.read_until("login: ")
        telnet_client.write("root\n")
        telnet_client.read_until("Password: ")
        telnet_client.write("toor\n")
        print("Telnet connection established")
        telnet_client.close()

    def smtp_connect():
        global toTarget
        smtp_client = smtplib.SMTP(ip_addresss)
        smtp_client.login("root", "toor")
        print("SMTP connection established")
        smtp_client.close()

    def mysql_connect():
        global toTarget
        mysql_client = mysql.connector.connect(
            host=ip_addresss,
            user="root",
            passwd="toor",
            port=toTarget
        )
        print("MySQL connection established")
        mysql_client.close()

    def mssql_connect():
        global toTarget
        mssql_client = pymssql.connect(
            host=ip_addresss,
            user="root",
            password="toor",
            port=toTarget
        )
        print("MSSQL connection established")
        mssql_client.close()

    def dns_connect():
        global toTarget
        dns_client = dns.resolver.Resolver()
        dns_client.nameservers = [ip_addresss]
        dns_client.query("google.com")
        print("DNS connection established")
        dns_client.close()


def scanPorts():
    global ip_addresss, start_port, end_port
    try:
        ip_address(ip_addresss)
    except ValueError:
        print("Invalid IP address")
        sys.exit()
    try:
        start_port = int(start_port)
    except ValueError:
        print("Invalid start port")
        sys.exit()

    nm = nmap.PortScanner()
    nm.scan(ip_addresss, str(start_port) + "-" + str(end_port))
    for host in nm.all_hosts():
        # clear
        print("\033[H\033[J")
        print(Fore.GREEN+"----------------------------------------------------")
        print(Style.RESET_ALL)
        print("Host : %s (%s)" % (host, nm[host].hostname()))
        print("State : %s" % nm[host].state())
        for proto in nm[host].all_protocols():
            print("Protocol : %s" % proto)
        print(Fore.GREEN+"----------------------------------------------------")
        print(Style.RESET_ALL)
        l = nm[host][proto].keys()
        for port in l:
            print(Fore.BLUE+"port : %s\tstate : %s" %
                  (port, nm[host][proto][port]['state']))
            # show the name of each open port
            # make it global
            global open_ports
            if nm[host][proto][port]['state'] == "open":
                open_ports.append(port)
                print(Fore.RED+"service : %s" %
                      nm[host][proto][port]['name'])
                print(Style.RESET_ALL)


scanPorts()


def target():
    # select port from list to target
    global open_ports
    print("Available ports to target: " + str(open_ports))
    # for each port in list make it green and print
    for port in open_ports:
        # if port is in port_available make it green
        if port in ports_available:
            print(Fore.GREEN+"port : " + str(port) + " " +
                  ports_available[port])
            print(Style.RESET_ALL)
        else:
            print(Fore.RED+"port can't be targetted: " + str(port))
            print(Style.RESET_ALL)
    # if user chooses 22 try to ssh to target
    toTarget = input("Enter the port you wish to target: ")
    # if input is in port_available start the service and connect
    if toTarget in ports_available:
        # if to target is in ports_available start the right service with the same name as the port
        if toTarget == service(ports_available[int(toTarget)], int(toTarget), service.ssh_connect):
            service.ssh_connect()
        elif toTarget == service(ports_available[int(toTarget)], int(toTarget), service.ftp_connect):
            service.ftp_connect()
        elif toTarget == service(ports_available[int(toTarget)], int(toTarget), service.telnet_connect):
            service.telnet_connect()
        elif toTarget == service(ports_available[int(toTarget)], int(toTarget), service.smtp_connect):
            service.smtp_connect()
        elif toTarget == service(ports_available[int(toTarget)], int(toTarget), service.mysql_connect):
            service.mysql_connect()
        elif toTarget == service(ports_available[int(toTarget)], int(toTarget), service.mssql_connect):
            service.mssql_connect()
        elif toTarget == service(ports_available[int(toTarget)], int(toTarget), service.dns_connect):
            service.dns_connect()
        else:
            print("Invalid port")
            sys.exit()


target()
